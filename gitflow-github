#!/bin/bash
###
# @Author: zhaolandelong
# @Date: 2021-12-30 05:36:44
 # @LastEditors: zhaolandelong
 # @LastEditTime: 2022-02-17 16:10:09
###
# version: 1.4.2
# Dependencies:
# - git
# - gh(https://cli.github.com/)
# Notice: Run "chmod +x ./gitflow" in cmd if this script not work

set -e

deployBR="master"
releaseBR="release"
developBR="develop"

featPrefix="feature"
bugPrefix="bugfix"
hotPrefix="hotfix"

logFile="CHANGELOG.md"

gitOriginUrl=$(grep -E "^\s+url = .+\.git$" .git/config | awk "{print \$3}")
gitUrl=${gitOriginUrl:0:-4}

doAdvertising() {
  echo -e "\nWelcome to use gitflow script! It will bring you convenience and orderly!"
  echo -e "If you want \033[1;35mUPDATE\033[0m the script, just use the commond below:"
  echo "================================================================"
  echo -e "\033[0;36mcurl https://raw.githubusercontent.com/zhaolandelong/git-workflow/main/install-gitflow >install-gitflow && \\ \nchmod +x ./install-gitflow && ./install-gitflow github && rm ./install-gitflow\033[0m"
  echo "================================================================"
  echo -e "Click \033[0;35mhttps://github.com/zhaolandelong/git-workflow\033[0m to see more.\n"
}

doCheck() {
  # branch check
  git fetch -p
  if [ $(git branch -r | grep -v "HEAD" | grep -Ewc " origin/($deployBR|$releaseBR|$developBR)") -ne 3 ]; then
    echo -e "\n\033[0;31mPlease create [$deployBR, $releaseBR, $developBR] branches and push them to origin first.\033[0m\n"
    exit
  fi
  if [ $(git branch -r | grep -v "HEAD" | grep -Ewc " origin/($featPrefix|$bugPrefix|$hotPrefix)$") -gt 0 ]; then
    echo -e "\n\033[0;31mThere can't be branch named [$featPrefix, $bugPrefix, $hotPrefix], please delete them or change the [Prefix VAR] in the gitflow script.\033[0m\n"
    exit
  fi
  # tag check
  if [ $(git ls-remote --tags origin | awk '{print $2}' | grep -Ec "^refs/tags/[0-9]+\.[0-9]+\.[0-9]+(\^\{\})?$") -eq 0 ]; then
    echo -e "\n\033[0;31mPlease create a SEMVER tag and push it to origin first.\neg: 1.0.0, 0.0.0\033[0m\n"
    exit
  fi
  echo -e "\033[0;32mAll Checks Passed!\033[0m\n\033[0;33mYou can comment the [doCheck] function (near line 320) to skip check.\033[0m"
}

setChangelog() {
  preCommit=$1
  curCommit=$2
  title="## [$2]"
  if [ ${#3} -gt 0 ]; then
    title=$3
  fi

  curCommitInfo=$(git show $curCommit -s --pretty=format:"%cd %H" --date=format:"%Y-%m-%d" | awk "END{print}")
  if [ $curCommit == "HEAD" ]; then
    curCommit=$(echo $curCommitInfo | awk '{print $2}')
  fi

  echo -e "$title($gitUrl/compare/$preCommit...$curCommit) ($(echo $curCommitInfo | awk '{print $1}'))\n" >$logFile

  logType=('fix' 'feat' 'perf' 'revert')
  logTitle=('Bug Fixes' 'Features' 'Performance Improvementes' 'Reverts')
  logs=$(git log --pretty=format:"%s ([%h]($gitUrl/commits/%H))" $preCommit...$curCommit)

  i=1
  while ((i <= ${#logType[*]})); do
    type=${logType[$i - 1]}
    if [ $(echo "$logs" | grep -Ec "^$type(\(.+\))?: ") -gt 0 ]; then
      echo -e "\n### ${logTitle[$i - 1]}\n" >>$logFile
      echo "$logs" | grep -E "^$type: " | sed "s/$type:/*/" >>$logFile
      echo "$logs" | grep -E "^$type\(.+\): " | sort | sed "s/$type(\(.*\)):/* **\1:**/" >>$logFile
    fi
    let i++
  done
}

# SIDE EFFECTS
# Usage:
# _updateVersion 1.2.3 patch
# echo $_tagVersion # 1.2.4
_updateVersion() {
  ver=$1

  IFS=. read -r major minor patch <<EOF
$ver
EOF

  case "$2" in
  patch) tag="$major.$minor.$((patch + 1))" ;;
  major) tag="$((major + 1)).0.0" ;;
  *) tag="$major.$((minor + 1)).0" ;;
  esac

  _tagVersion=$tag
}

gitCoAndPull() {
  git fetch -p
  git checkout $1
  if [ $(git branch -r | grep -wc "origin/$1$") -gt 0 ]; then
    git pull -r origin $1
  fi
}

doRebaseAndPush() {
  sourceBR=$1
  targetBR=$2
  echo -e "\n\033[0;34m===== $sourceBR rebase $targetBR start =====\033[0m\n"
  gitCoAndPull $targetBR
  gitCoAndPull $sourceBR
  git rebase $targetBR $sourceBR
  git push --set-upstream origin $sourceBR --force-with-lease
  echo -e "\n\033[0;32m===== $sourceBR rebase $targetBR finish =====\033[0m\n"
}

doReleaseAndSync() {
  gh release create "$_tagVersion" --title "$_tagVersion" --notes-file "$logFile"
  doRebaseAndPush $releaseBR $deployBR
  doRebaseAndPush $developBR $releaseBR
}

doFinish() {
  type=$1
  sourceBR=$2
  oldVersion=$_tagVersion

  case $type in
  $featPrefix)
    gh pr merge $sourceBR -rd
    ;;
  $bugPrefix)
    gh pr merge $sourceBR -rd
    doRebaseAndPush $developBR $releaseBR
    ;;
  $hotPrefix)
    _updateVersion $oldVersion patch
    gh pr merge $sourceBR -rd
    gitCoAndPull $deployBR
    git tag $_tagVersion && git push origin $_tagVersion
    setChangelog $oldVersion $_tagVersion
    doReleaseAndSync
    ;;
  "UAT")
    gh pr merge $sourceBR -r
    doRebaseAndPush $developBR $releaseBR
    ;;
  "DEPLOY")
    _updateVersion $oldVersion minor
    gh pr merge $sourceBR -r
    gitCoAndPull $deployBR
    git tag $_tagVersion && git push origin $_tagVersion
    setChangelog $oldVersion $_tagVersion "# [$_tagVersion]"
    doReleaseAndSync
    ;;
  esac
  gitCoAndPull $developBR
}

doSubmit() {
  type=$1
  sourceBR=$2
  targetBR=$3
  label=$4

  oldVersion=$_tagVersion
  doRebaseAndPush $sourceBR $targetBR

  case $type in
  "DEPLOY" | "UAT")
    _updateVersion $oldVersion minor
    title="$type: $_tagVersion"
    setChangelog $oldVersion HEAD "## [$title]"
    ;;
  $hotPrefix)
    _updateVersion $oldVersion patch
    title="HOTFIX($_tagVersion): $sourceBR"
    setChangelog $oldVersion HEAD "## [$title]"
    ;;
  *)
    title="$sourceBR to $targetBR"
    git log --pretty=format:"- %ad %s (%h)" --date=format:"%m/%d %A %H:%M" $sourceBR...$targetBR >$logFile
    ;;
  esac
  prStat=$(gh pr list --state open --base $targetBR --head $sourceBR | wc -l)
  if [ $prStat -eq 0 ]; then
    gh pr create --title "$title" --body-file "$logFile" --base "$targetBR" --label "$label"
  else
    gh pr edit --body-file "$logFile"
  fi
}

doWorkflow() {
  type=$1
  method=$2
  sourceBR=$3

  targetBR=""
  label=""

  case $type in
  $featPrefix)
    targetBR=$developBR
    label="enhancement"
    ;;
  $bugPrefix)
    targetBR=$releaseBR
    label="invalid"
    ;;
  $hotPrefix)
    targetBR=$deployBR
    label="bug"
    ;;
  "UAT")
    targetBR=$releaseBR
    ;;
  "DEPLOY")
    targetBR=$deployBR
    ;;
  esac

  case $method in
  "start")
    if [ $type == "UAT" -o $type == "DEPLOY" ]; then
      echo "UAT and DEPOLY can't start"
      exit
    fi
    gitCoAndPull $targetBR
    git checkout -b $sourceBR
    ;;
  "submit")
    doSubmit $type $sourceBR $targetBR $label
    ;;
  "finish")
    doFinish $type $sourceBR
    ;;
  esac
}

main() {
  type=$1
  name=$2
  method=$3
  branch=""

  # Auto fill the params if the branch name has "/"
  if [ ${#type} -eq 0 ]; then
    currentBranch=$(git rev-parse --abbrev-ref HEAD)
    split_index=$(expr index "$currentBranch" / | xargs)
    if [ $split_index -ne 0 ]; then
      tmpType=${currentBranch:0:split_index-1}
      tmpName=${currentBranch:split_index:${#currentBranch}}
      echo "Do you want to use current params?"
      echo "- Type: $tmpType"
      echo "- Name: $tmpName"
      select confirm in "yes" "no"; do
        if [ $confirm == "yes" ]; then
          type=$tmpType
          name=$tmpName
        fi
        break
      done
    fi
  fi

  # Fill $type
  if [ ${#type} -eq 0 ]; then
    echo "What's the type? (Notice: Admin Permission needed with UAT and DEPLOY)"
    select type in $featPrefix $bugPrefix $hotPrefix "UAT" "DEPLOY"; do
      echo "- Type: $type"
      break
    done
  fi

  # Fill $name
  if [ $type != "UAT" -a $type != "DEPLOY" -a ${#name} -eq 0 ]; then
    echo "What's the name (description for short. eg: btn-display-error)?"
    read name
    echo "- Name: $name"
  fi

  # Generate $branch
  case $type in
  "UAT")
    branch=$developBR
    ;;
  "DEPLOY")
    branch=$releaseBR
    ;;
  *)
    branch="$type/$name"
    ;;
  esac

  # Fill $method
  if [ ${#method} -eq 0 ]; then
    echo "What's the method?"
    echo "- start: Start a work and create a new branch"
    echo "- submit: Create or Update a PR"
    echo "- finish: Merge the PR, delete the branch and rebase to sync branch"
    select method in "start" "submit" "finish"; do
      echo "- Method: $method"
      break
    done
  fi

  doWorkflow $type $method $branch
}

doAdvertising
# NOTE: If you don't want check branch and tag, comment the following line.
doCheck

_tagVersion=$(git ls-remote --tags origin | awk "{print \$2}" | sort -t "." -k1,1n -k2,2n -k3,3n | awk "END{print}" | sed "s/.*\/\([0-9\.]*\).*/\1/g")
echo -e "\033[1;32mlatest\033[0m: $_tagVersion"

main $1 $2 $3
