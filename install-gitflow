#!/bin/bash
###
# @Author: zhaolandelong
# @Date: 2022-02-09 18:00:49
 # @LastEditors: zhaolandelong
 # @LastEditTime: 2022-02-15 18:19:06
###
# version: 1.4.1

set -e
echo "Installing..."

latest=$(curl -s https://raw.githubusercontent.com/zhaolandelong/git-workflow/main/gitflow | grep -E "# version:" | sed "s/# version: \(.*\)/\1/")
echo -e "\033[1;32mlatest\033[0m: $latest"

fileName="gitflow"
varList=('deployBR' 'releaseBR' 'developBR' 'logFile' 'featPrefix' 'bugPrefix' 'hotPrefix')
defaults=('master' 'release' 'develop' 'CHANGELOG.md' 'feature' 'bugfix' 'hotfix')
i=1
while ((i <= ${#varList[*]})); do
  eval "${varList[$i - 1]}=${defaults[$i - 1]}"
  let i++
done

doInstall() {
  echo "Would you like to use the current config?"
  hasSkipCheck=0
  if [ $1 == "update" ]; then
    if [ $(grep -Ec "# ?+doCheck" $fileName) -ne 0 ]; then
      hasSkipCheck=1
    fi
    for var in ${varList[*]}; do
      eval "$var=\$(grep \"$var=\" $fileName | sed \"s/$var=\\\"\(.*\)\\\"/\1/\")"
    done
  fi
  for var in ${varList[*]}; do
    eval "echo -e \"- $var: \033[0;33m\$$var\033[0m\""
  done
  select confirm in "Yes" "No"; do
    if [ $confirm == "No" ]; then
      for var in ${varList[*]}; do
        eval "initVal=\$$var"
        echo -e "Input the value of \033[1;34m$var\033[0m(Press ENTER to use \033[0;33m$initVal\033[0m):"
        eval "read $var"
        eval "temp=\$$var"
        if [ ${#temp} -eq 0 ]; then
          eval "$var=$initVal"
        fi
        eval "echo -e \"- $var: \$$var\""
      done
      echo "Are you sure to use this config?"
      for var in ${varList[*]}; do
        eval "echo -e \"- $var: \033[0;33m\$$var\033[0m\""
      done
      echo "Press ENTER to ensure"
      read confirm
      if [ ${#confirm} -ne 0 ]; then
        exit
      fi
    fi
    break
  done

  curl -s https://raw.githubusercontent.com/zhaolandelong/git-workflow/main/gitflow-github >$fileName && chmod +x ./$fileName

  for var in ${varList[*]}; do
    eval "sed -i \"s/%%$var%%/\$$var/g\" $fileName"
  done

  i=1
  while ((i <= ${#varList[*]})); do
    eval "sed -i \"s/\\\"${defaults[$i - 1]}\\\"/\\\"\$${varList[$i - 1]}\\\"/g\" $fileName"
    let i++
  done

  if [ $hasSkipCheck -eq 1 ]; then
    sed -i "s/^doCheck$/# doCheck/" $fileName
  fi

  git add $fileName

  if [ ${#logFile} -gt 0 ]; then
    if [ -e ./.gitignore -a $(grep -wc $logFile .gitignore) -eq 0 ]; then
      echo -e "\n# Git workflow log\n$logFile" >>.gitignore
      git add .gitignore
    fi
  fi
  git commit -m "chore(gitflow): install gitflow $latest :tada:"
}

doCheckTag() {
  if [ $(git ls-remote --tags origin | awk '{print $2}' | grep -Ec "^refs/tags/[0-9]+\.[0-9]+\.[0-9]+(\^\{\})?$") -eq 0 ]; then
    echo -e "There is no tag meet SEMVER, please input one."
    echo -e " NOTICE:\n If your input matches SEMVERï¼Œ then we will TAG and PUSH it to the origin.\n If NOT match, this step will be skiped."
    echo "Input a version(eg: 1.0.0):"
    read ver
    if [ $(echo $ver | grep -Ewc "[0-9]+\.[0-9]+\.[0-9]+") -ne 0 ]; then
      git tag $ver
      git push origin $ver
    fi
  fi
}

doCheckBranch() {
  git fetch -p
  currentBranch=$(git rev-parse --abbrev-ref HEAD)
  originBrs=$(git branch -r | grep -v "HEAD")
  for br in $deployBR $releaseBR $developBR; do
    if [ $(echo -e "$originBrs" | grep -Ewc " origin/$br") -eq 0 ]; then
      echo -e "There is no origin branch \033[1;34m$br\033[0m yet, do you want to create it now(base \033[0;33m$currentBranch\033[0m)?"
      select confirm in "Yes" "No"; do
        if [ $confirm == "Yes" ]; then
          if [ $(git branch | grep -Ewc " $br") -eq 0 ]; then
            git push origin HEAD:$br
          else
            git checkout $br
            git push --set-upstream origin $br
            git checkout $currentBranch
          fi
        fi
        break
      done
    fi
  done
}

main() {
  if [ -e ./$fileName ]; then
    local=$(grep -E "# version:" $fileName | sed "s/# version: \(.*\)/\1/")
    echo -e "\033[0;32mlocal\033[0m: $local"
    if [ $latest == $local ]; then
      echo -e "\033[0;32mVersion is already latest!\033[0m"
    else
      doInstall update
    fi
  else
    doInstall install
  fi

  doCheckTag

  doCheckBranch
}

main
